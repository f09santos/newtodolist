{"version":3,"sources":["App.styles.ts","components/ListItem/styles.ts","components/ListItem/index.tsx","components/AddArea/styles.ts","components/AddArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Area","Header","h1","done","ListItem","item","onChange","type","checked","e","id","target","name","AddArea","onEnter","useState","inputText","setInputText","className","placeholder","value","onKeyUp","code","App","list","setList","handleTaskChange","newList","i","taskName","push","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAEaA,EAAYC,IAAOC,IAAV,yGAMTC,EAAOF,IAAOC,IAAV,0FAMJE,EAASH,IAAOI,GAAV,uKCRNL,EAAYC,IAAOC,KAAI,gBAAGI,EAAH,EAAGA,KAAH,qUAiBTA,EAAO,eAAiB,UAjBf,iB,OCEvBC,EAAW,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAC7B,OACI,eAAC,EAAD,CAAaH,KAAME,EAAKF,KAAxB,UACI,uBACII,KAAK,WACLC,QAASH,EAAKF,KACdG,SAAU,SAAAG,GAAC,OAAIH,EAASD,EAAKK,GAAID,EAAEE,OAAOH,YAE9C,gCAAQH,EAAKO,WCdZf,EAAYC,IAAOC,IAAV,kYCKTc,EAAU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QACtB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KASA,OACI,eAAC,EAAD,WACI,qBAAKC,UAAU,QAAf,oBACA,uBACIX,KAAK,OACLY,YAAY,sBACZC,MAAOJ,EACPV,SAAU,SAAAG,GAAC,OAAEQ,EAAaR,EAAEE,OAAOS,QACnCC,QAfQ,SAACZ,GACH,UAAXA,EAAEa,MAAkC,KAAdN,IACrBF,EAAQE,GACRC,EAAa,YCwCVM,EA/CH,WACV,MAAwBR,mBAAiB,CACvC,CAAEL,GAAI,EAAGE,KAAM,8BAA4BT,MAAM,GACjD,CAAEO,GAAI,EAAGE,KAAM,6BAA8BT,MAAM,KAFrD,mBAAOqB,EAAP,KAAaC,EAAb,KAgBMC,EAAmB,SAAChB,EAAYP,GACpC,IAAIwB,EAAO,YAAOH,GAClB,IAAI,IAAII,KAAKD,EACRA,EAAQC,GAAGlB,KAAOA,IACnBiB,EAAQC,GAAGzB,KAAOA,GAGtBsB,EAAQE,IAGV,OACG,cAAC,EAAD,UACG,eAAC,EAAD,WACE,cAAC,EAAD,+BAEA,cAAC,EAAD,CAASb,QA1BK,SAACe,GACrB,IAAIF,EAAO,YAAOH,GAClBG,EAAQG,KAAK,CACXpB,GAAIc,EAAKO,OAAS,EAClBnB,KAAMiB,EACN1B,MAAM,IAERsB,EAAQE,MAqBDH,EAAKQ,KAAI,SAAC3B,EAAM4B,GAAP,OACR,cAAC,EAAD,CAEE5B,KAAMA,EACNC,SAAUoB,GAFLO,YC5BJC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.327656bc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: #17181F;\n    color: #797A81;\n    min-height: 100vh;\n`;\n\nexport const Area = styled.div`\n    margin: auto;\n    max-width: 980px;\n    padding: 10px;\n`;\n\nexport const Header = styled.h1`\n    margin: 0;\n    padding: 0;\n    color: #FFF;\n    text-align: center;\n    border-bottom: 1px solid #444;\n    padding-bottom: 20px;\n`;","import styled from 'styled-components';\n\ntype ContainerProps = {\n    done: boolean;\n}\n\nexport const Container = styled.div(({ done }: ContainerProps)=>(\n    `\n    display: flex;\n    background-color: #20212C;\n    padding: 10px;\n    border-radius: 10px;\n    margin-bottom: 10px;\n    align-items: center;\n\n    input {\n        width: 25px;\n        height: 25px;\n        margin-right: 5px;\n    }\n\n    label {\n        color: #CCC;\n        text-decoration: ${done ? 'line-through' : 'initial'};\n    }\n`\n));","import * as C from './styles';\nimport { Item } from '../../types/Item';\n\ntype Props = {\n    item: Item,\n    onChange: (id: number, done: boolean) => void\n}\n\nexport const ListItem = ({ item, onChange }: Props) => {\n    return (\n        <C.Container done={item.done}>\n            <input\n                type=\"checkbox\"\n                checked={item.done}\n                onChange={e => onChange(item.id, e.target.checked)}\n            />\n            <label>{item.name}</label>\n        </C.Container>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    border: 1px solid #555;\n    border-radius: 15px;\n    padding: 10px;\n    margin: 20px 0;\n    display: flex;\n    align-items: center;\n\n    .image {\n        margin-right: 5px;\n    }\n\n    input {\n        border: 0px;\n        background: transparent;\n        outline: 0;\n        color: #FFF;\n        font-size: 18px;\n        flex: 1;\n    }\n`;","import { useState, KeyboardEvent } from 'react';\nimport * as C from './styles';\n\ntype Props = {\n    onEnter: (taskName: string) => void\n}\n\nexport const AddArea = ({ onEnter }: Props) => {\n    const [inputText, setInputText] = useState('');\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n        if(e.code === 'Enter' && inputText !== '') {\n            onEnter(inputText);\n            setInputText('');\n        }\n    }\n\n    return (\n        <C.Container>\n            <div className=\"image\">➕</div>\n            <input\n                type=\"text\"\n                placeholder=\"Adicione uma tarefa\"\n                value={inputText}\n                onChange={e=>setInputText(e.target.value)}\n                onKeyUp={handleKeyUp}\n            />\n        </C.Container>\n    );\n}","import { useState } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/Item';\nimport { ListItem } from './components/ListItem';\nimport { AddArea } from './components/AddArea';\n\nconst App = () => {\n  const [list, setList] = useState<Item[]>([\n    { id: 1, name: 'Comprar o pão na padaria', done: false },\n    { id: 2, name: 'Comprar um bolo na padaria', done: true },\n  ]);\n\n  const handleAddTask = (taskName: string) => {\n    let newList = [...list];\n    newList.push({\n      id: list.length + 1,\n      name: taskName,\n      done: false\n    });\n    setList(newList);\n  }\n\n  \n  const handleTaskChange = (id: number, done: boolean) => {\n    let newList = [...list];\n    for(let i in newList) {\n      if(newList[i].id === id) {\n        newList[i].done = done;\n      }\n    }\n    setList(newList);\n  }\n\n  return (\n    \t<C.Container>\n        <C.Area>\n          <C.Header>Lista de Tarefas</C.Header>\n\n          <AddArea onEnter={handleAddTask} />\n\n          {list.map((item, index)=>(\n            <ListItem\n              key={index}\n              item={item}\n              onChange={handleTaskChange}\n            />\n          ))}\n\n        </C.Area>\n      </C.Container>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}